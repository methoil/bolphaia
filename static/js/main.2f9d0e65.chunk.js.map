{"version":3,"sources":["resources/whitePawn.svg","resources/blackPawn.svg","resources/hopliteWhite.svg","resources/hopliteBlack.svg","resources/whiteCataphract.svg","resources/blackCataphract.svg","resources/whiteArcher.svg","resources/blackArcher.svg","serviceWorker.js","components/game/game.model.ts","components/game/health-bar.tsx","components/game/square.tsx","components/game/board.tsx","components/pieces/piece.ts","components/pieces/levy.ts","components/pieces/hoplite.ts","components/pieces/cataphract.ts","components/pieces/piece.utils.ts","components/game/game.tsx","components/pieces/archer.ts","components/pieces/rangedPiece.ts","app-constants.ts","components/game/home.tsx","components/lobby/login.tsx","components/lobby/rooms.tsx","components/lobby/chat.tsx","components/lobby/lobby.tsx","components/game/onlineModeEntry.tsx","App.tsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","playerIds","pieceTypes","HealthBar","props","className","style","height","getHealthHeight","maxHealth","remainingHealth","max","remaining","Square","state","hoverIcon","this","cssClasses","join","onClick","bind","onMouseEnter","setHoverIconFromGameCallback","onMouseLeave","resetHoverIcon","backgroundImage","piece","getImageUrl","health","onMoveClick","setState","getHoverIcon","React","Board","board","xLength","boardState","length","yLength","i","squareRows","j","push","isEven","squareHighlight","highlightState","canMove","canAttack","inAttackRange","renderSquare","key","xIdx","yIdx","x","y","num","BasePiece","player","isSelected","pieceType","levy","attack","moveRange","damage","Levy","phrygians","whiteLevyImageSvg","blackLevyImageSvg","Hoplite","hoplite","Cataphract","cataphract","whiteCataphractImageSvg","blackCataphractImageSvg","getMovesPath","src","dest","xDelta","yDelta","isXNegative","isYNegative","xOffset","yOffset","path","selectedPiece","onHorizontalEdge","BOARD_HEIGHT","onVerticalEdge","BOARD_WIDTH","destSquare","currSquare","pusher","Archer","archer","range","whiteArcherImageSvg","blackArcherImageSvg","BACKEND_URL","Game","turn","selectedSquare","initializeBoard","generateEmptyHighlightedMoves","mouseHoverIcon","offlineMode","Pusher","cluster","forceTLS","playerSide","marginRight","userId","color","capitalize","subscribe","roomId","updateGame","setupGame","unsubscribe","Object","keys","players","axios","request","url","urlToGameServer","then","res","data","fromRow","updatedSquares","row","fromColumn","col","fromPieceMeta","toRow","toColumn","toPieceMeta","newBoardState","cloneDeep","pieceNameToConstructorMap","fromPiecePlacement","setHealth","toPiecePlacement","xSize","ySize","pieceToPlace","hittites","rowArray","Array","fill","highlightedMoves","currRow","clickedSquare","clickedPiece","getSelectedPiece","isMovePossible","generatePossibleMovesHighlights","isTargetValidRangedAttack","updateBoard","takeDamage","movesPath","indexBeforeDest","findIndex","move","console","error","payload","getUpdateServerPayload","method","getNewTurn","fromPiecePayload","fromPayload","toPiecePaylod","hoveredSquare","hoveredPiece","get","hoveredSquareHighlights","dimensions","getValidIndex","squareHasEnemyPiece","Math","min","index","maxIndex","target","square","Home","to","Login","username","Segment","Form","onSubmit","handleFormSubmit","Field","placeholder","value","autoFocus","onChange","handleUsernameChange","Button","type","e","login","Component","Rooms","joinedRooms","joined","map","room","List","Item","id","activeRoom","Content","floated","leaveRoom","Icon","name","undefined","enterRoom","joinableRooms","joinable","Header","as","divided","relaxed","Chat","messagesEnd","gameBoard","users","messages","newMessage","user","subscribeToRoomMultipart","messageLimit","hooks","onUserJoined","onUserLeft","onMessage","message","opponent","parts","startsWith","substring","senderId","content","filter","challengePlayer","acceptGame","Comment","Actions","Action","acceptChallenge","Author","Text","reverse","game","ref","child","Grid","Row","Column","width","Group","overflow","float","clear","el","maxHeight","handleSubmit","Input","action","fluid","handleNewMessageChange","scrollIntoView","behavior","sendMessage","text","attachment","link","fetchRequired","createRoom","addUserIds","startedGame","getPlayers","includes","Lobby","chat","chatManager","ChatManager","instanceLocator","tokenProvider","TokenProvider","connect","currentUser","getJoinableRooms","rooms","lobby","find","joinRoom","lobbyId","setInterval","pollRooms","catch","log","playersInRoom","getPlayersInRoom","deleteRoom","white","black","whitePlayer","blackPlayer","response","OnlineModeEntry","contents","enterGame","Container","App","component","exact","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f9d0e65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/whitePawn.d69014fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackPawn.1c52d8c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/hopliteWhite.57f58823.svg\";","module.exports = __webpack_public_path__ + \"static/media/hopliteBlack.295d049a.svg\";","module.exports = __webpack_public_path__ + \"static/media/whiteCataphract.e6294efe.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackCataphract.d39f1d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/whiteArcher.9cbde199.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackArcher.ae09d6fb.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum playerIds {\r\n  phrygians = 'phrygians',\r\n  hittites = 'hittites',\r\n}\r\n\r\nexport enum pieceTypes {\r\n  levy = 'levy',\r\n  archer = 'archer',\r\n  cataphract = 'cataphract',\r\n  hoplite = 'hoplite',\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport default function HealthBar(props: any) {\r\n  return (\r\n    <span className={\"health-box\"}>\r\n      <span\r\n        className={\"remaining-health\"}\r\n        style={{ height: getHealthHeight(props.maxHealth, props.remainingHealth) }}\r\n      ></span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction getHealthHeight(max: number, remaining: number): string {\r\n  const maxHealthPx = 29;\r\n  const remainingHeight = (remaining / max) * maxHealthPx;\r\n  return `${remainingHeight}px`;\r\n}\r\n","import * as React from \"react\";\r\nimport HealthBar from \"./health-bar\";\r\nimport { IPiece } from \"../pieces/IPieces.model\";\r\n\r\ninterface ISquareProps {\r\n  cssClasses: string[];\r\n  piece: IPiece | null;\r\n  onMoveClick: () => any;\r\n  getHoverIcon: () => any;\r\n}\r\n\r\nlet hoverIcon: string = \"\";\r\n\r\nexport default class Square extends React.Component<ISquareProps, {}> {\r\n  state: { hoverIcon: string };\r\n\r\n  constructor(props: ISquareProps) {\r\n    super(props);\r\n    this.state = {\r\n      hoverIcon: \"\"\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <button\r\n        className={`square ${this.props.cssClasses.join(\" \")} ${this.state.hoverIcon}`}\r\n        onClick={this.onClick.bind(this)}\r\n        onMouseEnter={this.setHoverIconFromGameCallback.bind(this)}\r\n        onMouseLeave={this.resetHoverIcon.bind(this)}\r\n        style={{\r\n          backgroundImage: `url(${this.props?.piece?.getImageUrl()})` || \"\"\r\n        }}\r\n      >\r\n        {this.props.piece ? (\r\n          <HealthBar\r\n            maxHealth={this.props.piece.maxHealth}\r\n            remainingHealth={this.props.piece.health}\r\n          ></HealthBar>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  onClick(): void {\r\n    this.props.onMoveClick();\r\n    return this.setHoverIconFromGameCallback();\r\n  }\r\n\r\n  resetHoverIcon(): void {\r\n    return this.setState({ hoverIcon: \"\" });\r\n  }\r\n\r\n  setHoverIconFromGameCallback(): void {\r\n    return this.setState(state => {\r\n      return { hoverIcon: this.props.getHoverIcon() };\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nimport '../../index.scss';\r\nimport Square from './square';\r\nimport { IBoardState, IPossibleMoves } from './game';\r\nimport { coordinate, IPiece } from '../pieces/IPieces.model';\r\n\r\ninterface ISquare {\r\n  style: string;\r\n  shade: string;\r\n  onMoveClick: () => any;\r\n  getHoverIcon: () => any;\r\n}\r\ninterface IBoardProps {\r\n  boardState: IBoardState;\r\n  highlightState: IPossibleMoves;\r\n  onMoveClick: (clickedSquare: coordinate) => void;\r\n  getHoverIcon: (clickedSquare: coordinate) => void;\r\n}\r\n\r\nexport default class Board extends React.Component<IBoardProps, {}> {\r\n  render() {\r\n    const board: JSX.Element[] = [];\r\n\r\n    const xLength = this.props.boardState.length;\r\n    const yLength = this.props.boardState[0].length;\r\n\r\n    for (let i = 0; i < xLength; i++) {\r\n      const squareRows: JSX.Element[] = [];\r\n      for (let j = 0; j < yLength; j++) {\r\n        const cssClasses: string[] = [];\r\n        cssClasses.push(\r\n          (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j)) ? 'light-square' : 'dark-square'\r\n        );\r\n\r\n        const piece = this.props.boardState[i][j];\r\n        const squareHighlight = this.props.highlightState.length && this.props.highlightState[i][j];\r\n        if (squareHighlight && squareHighlight.canMove) {\r\n          cssClasses.push(\r\n            squareHighlight.canAttack === true\r\n              ? 'highlighted-square-red'\r\n              : 'highlighted-square-green'\r\n          );\r\n        }\r\n        if (squareHighlight && squareHighlight.inAttackRange) {\r\n          cssClasses.push('highlighted-square-in-ranged-attack');\r\n        }\r\n\r\n        squareRows.push(this.renderSquare(i, j, cssClasses, piece));\r\n      }\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {squareRows}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{board}</div>;\r\n  }\r\n\r\n  renderSquare(xIdx: number, yIdx: number, cssClasses: string[], piece: IPiece | null) {\r\n    return (\r\n      <Square\r\n        key={xIdx * 8 + yIdx}\r\n        cssClasses={cssClasses}\r\n        piece={piece}\r\n        onMoveClick={() => this.props.onMoveClick({ x: xIdx, y: yIdx })}\r\n        getHoverIcon={() => this.props.getHoverIcon({ x: xIdx, y: yIdx })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction isEven(num: number): boolean {\r\n  return num % 2 === 0;\r\n}\r\n","import { IBasePiece } from './IPieces.model';\r\nimport { playerIds, pieceTypes } from '../game/game.model';\r\n\r\nexport default abstract class BasePiece implements IBasePiece {\r\n  public player: playerIds;\r\n  public isSelected: boolean = false;\r\n  abstract pieceType = pieceTypes.levy;\r\n  abstract health;\r\n  abstract readonly maxHealth: number;\r\n  abstract attack = 0;\r\n  abstract moveRange = 0;\r\n\r\n  constructor(player: playerIds) {\r\n    this.player = player;\r\n  }\r\n\r\n  public takeDamage(damage: number): number {\r\n    this.health = this.health - damage;\r\n    return this.health;\r\n  }\r\n\r\n  public setHealth(health) {\r\n    this.health = health;\r\n  }\r\n\r\n  abstract getImageUrl(): string;\r\n}\r\n","import BasePiece from \"./piece\";\r\nimport { playerIds, pieceTypes } from \"../game/game.model\";\r\nimport whiteLevyImageSvg from \"../../resources/whitePawn.svg\";\r\nimport blackLevyImageSvg from \"../../resources/blackPawn.svg\";\r\n\r\nexport default class Levy extends BasePiece {\r\n  pieceType = pieceTypes.levy;\r\n  moveRange: number = 2;\r\n  health: number = 2;\r\n  readonly maxHealth: number = 2;\r\n  attack: number = 1;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteLevyImageSvg : blackLevyImageSvg;\r\n  }\r\n}\r\n","import BasePiece from './piece';\r\nimport { playerIds, pieceTypes } from '../game/game.model';\r\nimport whiteLevyImageSvg from '../../resources/hopliteWhite.svg';\r\nimport blackLevyImageSvg from '../../resources/hopliteBlack.svg';\r\n\r\nexport default class Hoplite extends BasePiece {\r\n  pieceType: pieceTypes = pieceTypes.hoplite;\r\n  moveRange: number = 1;\r\n  health: number = 8;\r\n  readonly maxHealth: number = 8;\r\n  attack: number = 3;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteLevyImageSvg : blackLevyImageSvg;\r\n  }\r\n}\r\n","import BasePiece from \"./piece\";\r\nimport { playerIds, pieceTypes } from \"../game/game.model\";\r\nimport whiteCataphractImageSvg from \"../../resources/whiteCataphract.svg\";\r\nimport blackCataphractImageSvg from \"../../resources/blackCataphract.svg\";\r\n\r\nexport default class Cataphract extends BasePiece {\r\n  public pieceType = pieceTypes.cataphract;\r\n  public moveRange: number = 5;\r\n  public health: number = 10;\r\n  readonly maxHealth: number = 10;\r\n  public attack: number = 5;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteCataphractImageSvg : blackCataphractImageSvg;\r\n  }\r\n}\r\n","import { coordinate } from './IPieces.model';\r\nimport { IBoardState, BOARD_WIDTH, BOARD_HEIGHT } from '../game/game';\r\n\r\n// call this 8 times for each direction to get all possible moves\r\nexport function getMovesPath(src: coordinate, dest: coordinate, board: IBoardState): coordinate[] {\r\n  if (dest.x < 0 || src.x < 0 || dest.y < 0 || src.y < 0) {\r\n    return [];\r\n  }\r\n  let xDelta = dest.x - src.x;\r\n  let yDelta = dest.y - src.y;\r\n  const isXNegative: boolean = xDelta < 0;\r\n  const isYNegative: boolean = yDelta < 0;\r\n  let xOffset: number = 0;\r\n  let yOffset: number = 0;\r\n  const path: coordinate[] = [src];\r\n\r\n  const selectedPiece = board[src.x][src.y];\r\n  if (!selectedPiece) {\r\n    return [];\r\n  }\r\n\r\n  const onHorizontalEdge = src.x === 0 || src.x === BOARD_HEIGHT - 1;\r\n  const onVerticalEdge = src.y === 0 || src.y === BOARD_WIDTH - 1;\r\n  while (xDelta !== 0 || yDelta !== 0) {\r\n    if (xDelta !== 0) {\r\n      xOffset += isXNegative ? -1 : 1;\r\n      xDelta += isXNegative ? 1 : -1;\r\n    }\r\n    if (yDelta !== 0) {\r\n      yOffset += isYNegative ? -1 : 1;\r\n      yDelta += isYNegative ? 1 : -1;\r\n    }\r\n\r\n    const destSquare = board[src.x + xOffset][src.y + yOffset];\r\n    const currSquare = { x: src.x + xOffset, y: src.y + yOffset };\r\n    if (destSquare !== null) {\r\n      if (selectedPiece.player !== destSquare.player) {\r\n        path.push(currSquare);\r\n      }\r\n      break;\r\n    }\r\n\r\n    path.push(currSquare);\r\n\r\n    // edge reached - stop finding path\r\n    if (\r\n      (!onHorizontalEdge &&\r\n        (currSquare.x === 0 || currSquare.x === BOARD_HEIGHT - 1) &&\r\n        (xDelta !== 0 || yDelta !== 0)) ||\r\n      (!onVerticalEdge &&\r\n        (currSquare.y === 0 || currSquare.y === BOARD_WIDTH - 1) &&\r\n        (yDelta !== 0 || xDelta !== 0))\r\n    ) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return path;\r\n}\r\n","import * as React from 'react';\r\nimport { cloneDeep, findIndex, get, capitalize } from 'lodash';\r\nimport Pusher from 'pusher-js';\r\nimport axios from 'axios';\r\n\r\nimport '../../index.scss';\r\nimport { playerIds, pieceTypes } from './game.model';\r\nimport Board from './board';\r\nimport levy from '../pieces/levy';\r\nimport hoplite from '../pieces/hoplite';\r\nimport { IPiece, coordinate, IRangedPiece } from '../pieces/IPieces.model';\r\nimport Cataphract from '../pieces/cataphract';\r\nimport { getMovesPath } from '../pieces/piece.utils';\r\nimport Archer from '../pieces/archer';\r\nimport RangedPiece from '../pieces/rangedPiece';\r\nimport { BACKEND_URL } from '../../app-constants';\r\n\r\nexport const BOARD_WIDTH: number = 24;\r\nexport const BOARD_HEIGHT: number = 16;\r\n\r\nexport type IPossibleMove = {\r\n  canMove: boolean;\r\n  canAttack: boolean;\r\n  inAttackRange: boolean;\r\n};\r\nexport type IPossibleMoves = IPossibleMove[][];\r\nexport type ISelectedPiece = IPiece | IRangedPiece | null;\r\nexport type IBoardState = (IPiece | null)[][];\r\n\r\nlet pusher;\r\n\r\ninterface IUpdateServerPayload {\r\n  player: string; // userId??\r\n  updatedSquares: ISquareUpdatePayload[];\r\n}\r\n\r\ninterface ISquareUpdatePayload {\r\n  row: number;\r\n  col: number;\r\n  piece: IPieceUpdatePayload | null;\r\n}\r\n\r\ninterface IPieceUpdatePayload {\r\n  player: playerIds | undefined;\r\n  health: number | undefined;\r\n  pieceType: string | undefined; // TODO: add enums\r\n}\r\n\r\ninterface IGameState {\r\n  turn: playerIds;\r\n  boardState: IBoardState;\r\n  highlightState: IPossibleMoves;\r\n  selectedSquare: coordinate | null;\r\n  mouseHoverIcon: string;\r\n  playerSide?: playerIds;\r\n  players?: { [key: string]: playerIds };\r\n}\r\n\r\ninterface IGameProps {\r\n  offlineMode: boolean;\r\n  userId?: string;\r\n  roomId?: string;\r\n}\r\n\r\nexport default class Game extends React.Component<IGameProps, {}> {\r\n  state: IGameState;\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"current-turn-text\">\r\n          {this.state.playerSide ? (\r\n            <span style={{ marginRight: '10px' }}>\r\n              You are {this.props.userId} of the\r\n              <span\r\n                style={{ color: this.state.playerSide === playerIds.phrygians ? 'white' : 'black' }}\r\n              >\r\n                &nbsp;{capitalize(this.state.playerSide)}\r\n              </span>{' '}\r\n            </span>\r\n          ) : (\r\n            ''\r\n          )}\r\n          Current turn:&nbsp;\r\n          <span style={{ color: this.state.turn === playerIds.phrygians ? 'white' : 'black' }}>\r\n            {capitalize(this.state.turn)}\r\n          </span>\r\n        </div>\r\n        <Board\r\n          boardState={this.state.boardState}\r\n          highlightState={this.state.highlightState}\r\n          onMoveClick={this.onMoveClick.bind(this)}\r\n          getHoverIcon={this.getHoverIcon.bind(this)}\r\n        ></Board>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  constructor(props) {\r\n    // no props will be passed here?\r\n    super(props);\r\n    this.state = {\r\n      turn: playerIds.phrygians,\r\n      selectedSquare: null,\r\n      boardState: this.initializeBoard(BOARD_HEIGHT, BOARD_WIDTH),\r\n      highlightState: this.generateEmptyHighlightedMoves(),\r\n      mouseHoverIcon: '',\r\n    };\r\n\r\n    if (!this.props.offlineMode) {\r\n      pusher = new Pusher('6e48a6609db3a8a6b150', {\r\n        cluster: 'mt1',\r\n        forceTLS: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.offlineMode) {\r\n      const channel = pusher.subscribe(`game-${this.props.roomId}`);\r\n      channel.bind('board-updated', () => {\r\n        this.updateGame();\r\n      });\r\n      this.setupGame();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (!this.props.offlineMode) {\r\n      pusher.unsubscribe(`game-${this.props.roomId}`);\r\n    }\r\n  }\r\n\r\n  public getPlayers() {\r\n    return Object.keys(this.state.players || {});\r\n  }\r\n\r\n  private setupGame() {\r\n    axios\r\n      .request({\r\n        url: this.urlToGameServer,\r\n      })\r\n      .then(res => {\r\n        if (res.data.players) {\r\n          this.setState({ players: res.data.players });\r\n          this.setState({ playerSide: res.data.players[this.props.userId ?? ''] });\r\n          return;\r\n        }\r\n      });\r\n  }\r\n\r\n  private updateGame() {\r\n    axios\r\n      .request({\r\n        url: this.urlToGameServer,\r\n      })\r\n      .then(res => {\r\n        // use same format as the sent payload and just update the changed squares\r\n        if (res.data.player === this.props.userId) {\r\n          return;\r\n        }\r\n\r\n        // TODO this code is the same thing copied twice ... make function\r\n        // TODO: add type for this res\r\n        const fromRow = res?.data?.updatedSquares?.[0].row;\r\n        const fromColumn = res?.data?.updatedSquares?.[0].col;\r\n        const fromPieceMeta = res?.data?.updatedSquares?.[0].piece;\r\n\r\n        const toRow = res?.data?.updatedSquares?.[1].row;\r\n        const toColumn = res?.data?.updatedSquares?.[1].col;\r\n        const toPieceMeta = res?.data?.updatedSquares?.[1].piece;\r\n\r\n        const newBoardState = cloneDeep(this.state.boardState);\r\n        // TODO: need to create corrct piece -\r\n        // type of uninstantiated class???\r\n        const pieceNameToConstructorMap: { [key: string]: any } = {\r\n          [pieceTypes.levy]: levy,\r\n          [pieceTypes.hoplite]: hoplite,\r\n          [pieceTypes.archer]: Archer,\r\n          [pieceTypes.cataphract]: Cataphract,\r\n        };\r\n\r\n        const fromPiecePlacement = fromPieceMeta\r\n          ? new pieceNameToConstructorMap[fromPieceMeta.pieceType](\r\n              fromPieceMeta.player,\r\n              fromPieceMeta.health,\r\n            )\r\n          : null;\r\n        newBoardState[fromRow][fromColumn] = fromPiecePlacement;\r\n        if (fromPiecePlacement) {\r\n          fromPiecePlacement.setHealth(fromPieceMeta.health);\r\n        }\r\n\r\n        const toPiecePlacement = toPieceMeta\r\n          ? new pieceNameToConstructorMap[toPieceMeta.pieceType](\r\n              toPieceMeta.player,\r\n              toPieceMeta.health,\r\n            )\r\n          : null;\r\n        newBoardState[toRow][toColumn] = toPiecePlacement;\r\n        if (toPiecePlacement) {\r\n          toPiecePlacement.setHealth(toPieceMeta.health);\r\n        }\r\n\r\n        this.setState({\r\n          boardState: newBoardState,\r\n          turn: this.state.playerSide,\r\n        });\r\n      });\r\n  }\r\n\r\n  private get urlToGameServer() {\r\n    return `${BACKEND_URL}/games/${this.props.roomId}`;\r\n  }\r\n\r\n  private initializeBoard(xSize: number, ySize: number): IBoardState {\r\n    const boardState: Array<IPiece | null>[] = [];\r\n    for (let x = 0; x < xSize; x++) {\r\n      let pieceToPlace: IPiece | null = null;\r\n      if (x === 1) {\r\n        const rowArray: Array<IPiece | null> = new Array(ySize).fill(null);\r\n        rowArray[2] = new Cataphract(playerIds.phrygians);\r\n        rowArray[rowArray.length - 3] = new Cataphract(playerIds.phrygians);\r\n\r\n        rowArray[4] = new Archer(playerIds.phrygians);\r\n        rowArray[7] = new Archer(playerIds.phrygians);\r\n        rowArray[10] = new Archer(playerIds.phrygians);\r\n        rowArray[13] = new Archer(playerIds.phrygians);\r\n        rowArray[16] = new Archer(playerIds.phrygians);\r\n        rowArray[19] = new Archer(playerIds.phrygians);\r\n\r\n        boardState.push(rowArray);\r\n        continue;\r\n      } else if (x === 2) {\r\n        pieceToPlace = new hoplite(playerIds.phrygians);\r\n      } else if (x === 3) {\r\n        pieceToPlace = new levy(playerIds.phrygians);\r\n      } else if (x === xSize - 4) {\r\n        pieceToPlace = new levy(playerIds.hittites);\r\n      } else if (x === xSize - 3) {\r\n        pieceToPlace = new hoplite(playerIds.hittites);\r\n      } else if (x === xSize - 2) {\r\n        const rowArray = new Array(ySize).fill(null);\r\n        rowArray[2] = new Cataphract(playerIds.hittites);\r\n        rowArray[ySize - 3] = new Cataphract(playerIds.hittites);\r\n\r\n        rowArray[4] = new Archer(playerIds.hittites);\r\n        rowArray[7] = new Archer(playerIds.hittites);\r\n        rowArray[10] = new Archer(playerIds.hittites);\r\n        rowArray[13] = new Archer(playerIds.hittites);\r\n        rowArray[16] = new Archer(playerIds.hittites);\r\n        rowArray[19] = new Archer(playerIds.hittites);\r\n        boardState.push(rowArray);\r\n        continue;\r\n      }\r\n\r\n      boardState.push(new Array(ySize).fill(pieceToPlace));\r\n    }\r\n\r\n    return boardState;\r\n  }\r\n\r\n  private getSelectedPiece(): IPiece | null {\r\n    return (\r\n      this.state.selectedSquare &&\r\n      this.state.boardState[this.state.selectedSquare.x][this.state.selectedSquare.y]\r\n    );\r\n  }\r\n\r\n  private generateEmptyHighlightedMoves(): IPossibleMoves {\r\n    const highlightedMoves: IPossibleMove[][] = [];\r\n    for (let x = 0; x < BOARD_HEIGHT; x++) {\r\n      const currRow: IPossibleMove[] = [];\r\n      for (let y = 0; y < BOARD_WIDTH; y++) {\r\n        const noMovesSquare: IPossibleMove = {\r\n          canMove: false,\r\n          canAttack: false,\r\n          inAttackRange: false,\r\n        };\r\n        currRow.push(noMovesSquare);\r\n      }\r\n      highlightedMoves.push(currRow);\r\n    }\r\n    return highlightedMoves;\r\n  }\r\n\r\n  private onMoveClick(clickedSquare: coordinate): void {\r\n    // TODO: make visual indicator of this somewhere\r\n    if (!this.props.offlineMode && this.state.turn !== this.state.playerSide) {\r\n      return;\r\n    }\r\n\r\n    const selectedSquare = this.state.selectedSquare;\r\n    const clickedPiece = this.state.boardState[clickedSquare.x][clickedSquare.y];\r\n    const selectedPiece = this.getSelectedPiece();\r\n    const isMovePossible = this.state.highlightState[clickedSquare.x][clickedSquare.y].canMove;\r\n\r\n    // nothing to do\r\n    if (!selectedPiece && !clickedPiece) {\r\n      return;\r\n    }\r\n\r\n    // Select the clicked piece if none is currently selected\r\n    else if (!selectedPiece && clickedPiece != null) {\r\n      if (clickedPiece.player !== this.state.turn) {\r\n        return;\r\n      }\r\n\r\n      return this.setState({\r\n        selectedSquare: { ...clickedSquare },\r\n        highlightState: this.generatePossibleMovesHighlights(clickedSquare, clickedPiece),\r\n      });\r\n    }\r\n\r\n    // unselect piece when clicking on invalid move location\r\n    else if (\r\n      selectedPiece &&\r\n      !isMovePossible &&\r\n      !this.isTargetValidRangedAttack(clickedSquare, selectedPiece as RangedPiece)\r\n    ) {\r\n      return this.setState({\r\n        selectedSquare: null,\r\n        highlightState: this.generateEmptyHighlightedMoves(),\r\n      });\r\n    }\r\n\r\n    const newBoardState = cloneDeep(this.state.boardState);\r\n    let updateBoard = false;\r\n    // layout of board may be changed in these cases, need to update server\r\n    // case of ranged attack\r\n    if (\r\n      selectedPiece &&\r\n      clickedPiece &&\r\n      this.isTargetValidRangedAttack(clickedSquare, selectedPiece as RangedPiece)\r\n    ) {\r\n      clickedPiece.takeDamage(selectedPiece.attack);\r\n\r\n      if (clickedPiece.health <= 0) {\r\n        // TODO: move clicked piece to graveyard\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = null;\r\n      } else {\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = clickedPiece;\r\n      }\r\n      updateBoard = true;\r\n    }\r\n\r\n    // Move the piece if a valid move is selected\r\n    // includes doing damage\r\n    else if (selectedPiece && selectedSquare && isMovePossible) {\r\n      // combat occurs on destination arrival\r\n      // trample will happen elsewhere?\r\n      if (clickedPiece && clickedPiece !== selectedPiece) {\r\n        clickedPiece.takeDamage(selectedPiece.attack);\r\n        if (clickedPiece.health <= 0) {\r\n          // TODO: move clicked piece to graveyard\r\n          newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n          newBoardState[clickedSquare.x][clickedSquare.y] = selectedPiece;\r\n        } else {\r\n          const movesPath = getMovesPath(selectedSquare, clickedSquare, this.state.boardState);\r\n          const indexBeforeDest =\r\n            findIndex(movesPath, move => {\r\n              return move.x === clickedSquare.x && move.y === clickedSquare.y;\r\n            }) - 1;\r\n\r\n          if (indexBeforeDest < 0) {\r\n            // TODO: handle this... possibility..\r\n            console.error('something went wrong.. should not happen.. crash imminent');\r\n          }\r\n\r\n          const dest = movesPath[indexBeforeDest];\r\n          newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n          newBoardState[dest.x][dest.y] = selectedPiece;\r\n          newBoardState[clickedSquare.x][clickedSquare.y] = clickedPiece;\r\n        }\r\n      } else {\r\n        newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = selectedPiece;\r\n      }\r\n\r\n      updateBoard = true;\r\n    }\r\n\r\n    // execute move in one spot\r\n    if (updateBoard) {\r\n      if (!this.props.offlineMode) {\r\n        const payload: IUpdateServerPayload = {\r\n          player: this.props.userId ?? '',\r\n          updatedSquares: this.getUpdateServerPayload(newBoardState, selectedSquare, clickedSquare),\r\n        };\r\n        axios.request({\r\n          method: 'POST',\r\n          url: this.urlToGameServer,\r\n          data: payload,\r\n        });\r\n      }\r\n\r\n      return this.setState({\r\n        boardState: newBoardState,\r\n        selectedSquare: null,\r\n        highlightState: this.generateEmptyHighlightedMoves(),\r\n        turn: this.getNewTurn(),\r\n      });\r\n    }\r\n  }\r\n\r\n  private getNewTurn(): playerIds {\r\n    return this.state.turn === playerIds.phrygians ? playerIds.hittites : playerIds.phrygians;\r\n  }\r\n\r\n  private getUpdateServerPayload(\r\n    newBoardState: IBoardState,\r\n    selectedSquare: coordinate | null,\r\n    clickedSquare: coordinate | null,\r\n  ): ISquareUpdatePayload[] {\r\n    const fromPiecePayload =\r\n      (selectedSquare &&\r\n        newBoardState[selectedSquare.x][selectedSquare.y] && {\r\n          player: newBoardState[selectedSquare.x][selectedSquare.y]?.player,\r\n          health: newBoardState[selectedSquare.x][selectedSquare.y]?.health,\r\n          pieceType: newBoardState[selectedSquare.x][selectedSquare.y]?.pieceType,\r\n        }) ||\r\n      null;\r\n    const fromPayload: ISquareUpdatePayload = {\r\n      row: selectedSquare?.x ?? -1,\r\n      col: selectedSquare?.y ?? -1,\r\n      piece: fromPiecePayload,\r\n    };\r\n\r\n    const toPiecePaylod =\r\n      (clickedSquare &&\r\n        newBoardState[clickedSquare.x][clickedSquare.y] && {\r\n          player: newBoardState[clickedSquare.x][clickedSquare.y]?.player,\r\n          health: newBoardState[clickedSquare.x][clickedSquare.y]?.health,\r\n          pieceType: newBoardState[clickedSquare.x][clickedSquare.y]?.pieceType,\r\n        }) ||\r\n      null;\r\n    const toPayload: ISquareUpdatePayload = {\r\n      row: clickedSquare?.x ?? -1,\r\n      col: clickedSquare?.y ?? -1,\r\n      piece: toPiecePaylod,\r\n    };\r\n\r\n    return [fromPayload, toPayload];\r\n  }\r\n\r\n  private getHoverIcon(hoveredSquare: coordinate): string {\r\n    const selectedPiece = this.getSelectedPiece();\r\n    const hoveredPiece = get(\r\n      this,\r\n      `state.boardState[${hoveredSquare.x}][${hoveredSquare.y}]`,\r\n      null,\r\n    );\r\n    if (!selectedPiece && hoveredPiece && hoveredPiece.player === this.state.turn) {\r\n      return 'pointer-icon';\r\n    } else if (!selectedPiece) {\r\n      return '';\r\n    }\r\n\r\n    const hoveredSquareHighlights = this.state.highlightState[hoveredSquare.x][hoveredSquare.y];\r\n    if (this.isTargetValidRangedAttack(hoveredSquare, selectedPiece as RangedPiece)) {\r\n      return 'bow-icon';\r\n    } else if (hoveredSquareHighlights.canAttack) {\r\n      return 'sword-icon';\r\n    } else if (hoveredSquareHighlights.canMove) {\r\n      return 'boots-icon';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  private generatePossibleMovesHighlights(\r\n    src: coordinate,\r\n    selectedPiece: ISelectedPiece,\r\n  ): IPossibleMoves {\r\n    const highlightedMoves = this.generateEmptyHighlightedMoves();\r\n    if (!selectedPiece) {\r\n      return highlightedMoves;\r\n    }\r\n\r\n    // get possible moves for vectors in all directions a piece can move; detect blocks and board end\r\n    const dimensions: number[] = [-selectedPiece.moveRange, 0, selectedPiece.moveRange];\r\n    for (let x = 0; x < 3; x++) {\r\n      for (let y = 0; y < 3; y++) {\r\n        if (x === 1 && y === 1) {\r\n          continue; // just the square the piece is on\r\n        }\r\n        const dest = {\r\n          x: this.getValidIndex(src.x + dimensions[x], BOARD_HEIGHT - 1),\r\n          y: this.getValidIndex(src.y + dimensions[y], BOARD_WIDTH - 1),\r\n        };\r\n        const movesPath = getMovesPath(src, dest, this.state.boardState);\r\n\r\n        for (let move of movesPath) {\r\n          highlightedMoves[move.x][move.y].canMove = true;\r\n          if (this.squareHasEnemyPiece(move, selectedPiece)) {\r\n            highlightedMoves[move.x][move.y].canAttack = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((selectedPiece as IRangedPiece).range) {\r\n      const range = (selectedPiece as IRangedPiece).range;\r\n\r\n      for (\r\n        let x = Math.max(src.x - range, 0);\r\n        x <= Math.min(src.x + range, BOARD_HEIGHT - 1);\r\n        x++\r\n      ) {\r\n        for (\r\n          let y = Math.max(src.y - range, 0);\r\n          y <= Math.min(src.y + range, BOARD_WIDTH - 1);\r\n          y++\r\n        ) {\r\n          highlightedMoves[x][y].inAttackRange = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return highlightedMoves;\r\n  }\r\n\r\n  private getValidIndex(index: number, maxIndex: number): number {\r\n    if (index > maxIndex) {\r\n      return maxIndex;\r\n    } else if (index < 0) {\r\n      return 0;\r\n    } else {\r\n      return index;\r\n    }\r\n  }\r\n\r\n  private isTargetValidRangedAttack(target: coordinate, selectedPiece: RangedPiece): boolean {\r\n    // TODO: how could this resolve to 0??????\r\n    return (\r\n      !!(selectedPiece as IRangedPiece).range &&\r\n      (this.state.highlightState[target.x][target.y]?.inAttackRange ?? false) &&\r\n      this.squareHasEnemyPiece(target, selectedPiece)\r\n    );\r\n  }\r\n\r\n  private squareHasEnemyPiece(square: coordinate, selectedPiece: IPiece): boolean {\r\n    return (\r\n      get(this, `state.boardState[${square.x}][${square.y}].player`, selectedPiece.player) !==\r\n      selectedPiece.player\r\n    );\r\n  }\r\n}\r\n","import whiteArcherImageSvg from \"../../resources/whiteArcher.svg\";\r\nimport blackArcherImageSvg from \"../../resources/blackArcher.svg\";\r\nimport RangedPiece from \"./rangedPiece\";\r\nimport { playerIds, pieceTypes } from \"../game/game.model\";\r\n\r\nexport default class Archer extends RangedPiece {\r\n  readonly pieceType: pieceTypes = pieceTypes.archer;\r\n  moveRange: number = 2;\r\n  health: number = 2;\r\n  readonly maxHealth: number = 2;\r\n  attack: number = 1;\r\n  range: number = 4;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteArcherImageSvg : blackArcherImageSvg;\r\n  }\r\n}\r\n","import BasePiece from \"./piece\";\r\n\r\nexport default abstract class RangedPiece extends BasePiece {\r\n  abstract range: number = 0;\r\n  // TODO: abstract accuracy: number ??\r\n}\r\n","export const BACKEND_URL = 'https://bolphaia-backend.herokuapp.com';\r\n","\r\nimport React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/offline-mode\">Play offline on this screen</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/online-mode\">Enter lobby to play online</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };","import React from 'react';\r\nimport { Segment, Button, Form } from 'semantic-ui-react';\r\n\r\ninterface ILobbyState {\r\n  username: string;\r\n}\r\n\r\ninterface ILoginProps {\r\n  login: (string) => void;\r\n}\r\n\r\nexport default class Login extends React.Component<ILoginProps, any> {\r\n  state: ILobbyState = {\r\n    username: '',\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Segment>\r\n        <Form onSubmit={this.handleFormSubmit.bind(this)}>\r\n          <Form.Field>\r\n            <label>Username</label>\r\n            <input\r\n              placeholder=\"Username\"\r\n              value={this.state.username}\r\n              autoFocus\r\n              onChange={this.handleUsernameChange.bind(this)}\r\n            />\r\n          </Form.Field>\r\n          <Button type=\"submit\">Log in</Button>\r\n        </Form>\r\n      </Segment>\r\n    );\r\n  }\r\n\r\n  handleUsernameChange(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleFormSubmit() {\r\n    if (this.state.username) {\r\n      this.props.login(this.state.username);\r\n    }\r\n  }\r\n}\r\n","// chess-ui/src/Rooms.js\r\nimport React from 'react';\r\nimport { List, Icon, Header } from 'semantic-ui-react';\r\n\r\nexport interface IRoom {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\ntype IEnterRoom = (roomId: string) => void;\r\ntype ILeaveRoom = (roomId: string) => void;\r\n\r\nexport default function Rooms(props: {\r\n  joined: IRoom[];\r\n  joinable: IRoom[];\r\n  activeRoom?: string;\r\n  enterRoom: IEnterRoom;\r\n  leaveRoom: ILeaveRoom;\r\n}) {\r\n  const joinedRooms = props.joined.map(room => (\r\n    <List.Item key={room.id}>\r\n      {room.id === props.activeRoom && (\r\n        <List.Content floated=\"right\">\r\n          <a onClick={() => props.leaveRoom(room.id)}>Leave</a>\r\n        </List.Content>\r\n      )}\r\n      <Icon name={room.id === props.activeRoom ? 'angle double right' : undefined} />\r\n      <List.Content>\r\n        <a onClick={() => props.enterRoom(room.id)}>{room.name}</a>\r\n      </List.Content>\r\n    </List.Item>\r\n  ));\r\n  \r\n  const joinableRooms = props.joinable.map(room => (\r\n    <List.Item key={room.id}>\r\n      <Icon name={undefined} />\r\n      <List.Content>\r\n        <a onClick={() => props.enterRoom(room.id)}>{room.name}</a>\r\n      </List.Content>\r\n    </List.Item>\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <Header as=\"h4\">Active Rooms</Header>\r\n      <List divided relaxed>\r\n        {joinedRooms}\r\n      </List>\r\n      <Header as=\"h4\">Joinable Rooms</Header>\r\n      <List divided relaxed>\r\n        {joinableRooms}\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Grid, List, Comment, Form, Input } from 'semantic-ui-react';\r\nimport { IRoom } from './rooms';\r\nimport GameBoard from '../game/game';\r\nimport { playerIds } from '../game/game.model';\r\n\r\nlet playerSide = playerIds.phrygians;\r\n\r\ninterface IMessage {\r\n  id: string;\r\n  user: string;\r\n  message: string;\r\n  opponent?: string;\r\n}\r\n\r\ninterface IUser {\r\n  id: string;\r\n  name: string;\r\n  sendMessage: (payload: { text: string; roomId: string; attachment?: any }) => void;\r\n  createRoom: (paylod: { name: string; addUserIds: string[] }) => Promise<IRoom>;\r\n}\r\n\r\ninterface IChatProps {\r\n  user: IUser;\r\n  room: { id: string; users: IUser[] };\r\n  game: any;\r\n  startedGame: (roomId: string, white: string, black: string) => Promise<any>;\r\n}\r\n\r\ninterface IChatState {\r\n  users: IUser[];\r\n  messages: IMessage[];\r\n  newMessage: string;\r\n}\r\n\r\ninterface IChatComponent {\r\n  // messagesEnd: any;\r\n  gameBoard: HTMLElement | undefined;\r\n  // playerSide: any; // TODO: get this working instead of global var\r\n}\r\n\r\nexport default class Chat extends React.Component<IChatProps, any> implements IChatComponent {\r\n  state: IChatState;\r\n  private messagesEnd;\r\n  public gameBoard;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: [], // props.room.users,\r\n      messages: [],\r\n      newMessage: '',\r\n    };\r\n\r\n    props.user\r\n      .subscribeToRoomMultipart({\r\n        roomId: props.room.id,\r\n        messageLimit: 100,\r\n        hooks: {\r\n          onUserJoined: user => {\r\n            this.setState({\r\n              users: props.room.users,\r\n            });\r\n          },\r\n          onUserLeft: user => {\r\n            this.setState({\r\n              users: props.room.users,\r\n            });\r\n          },\r\n          onMessage: message => {\r\n            const messages = this.state.messages;\r\n            let opponent;\r\n            if (message?.parts?.[1]?.payload?.url?.startsWith('urn:player:')) {\r\n              opponent = message?.parts?.[1]?.payload?.url?.substring(11);\r\n              if (opponent !== props.user.id) {\r\n                opponent = undefined;\r\n              }\r\n            }\r\n            messages.push({\r\n              id: message.id,\r\n              user: message.senderId,\r\n              opponent,\r\n              message: message?.parts?.[0]?.payload?.content ?? '',\r\n            });\r\n            this.setState({\r\n              messages: messages,\r\n            });\r\n          },\r\n        },\r\n      })\r\n      .then(() => {\r\n        this.setState({\r\n          users: props.room.users,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const users = this.state.users\r\n      .filter(user => user.id !== this.props.user.id)\r\n      .map(user => (\r\n        <List.Item key={user.id}>\r\n          <List.Content floated=\"right\">\r\n            <a onClick={() => this.challengePlayer(user)}>Challenge</a>\r\n          </List.Content>\r\n          <List.Content>{user.name}</List.Content>\r\n        </List.Item>\r\n      ));\r\n\r\n    const messages = this.state.messages\r\n      .map(message => {\r\n        let acceptGame;\r\n        if (message.opponent) {\r\n          acceptGame = (\r\n            <Comment.Actions>\r\n              <Comment.Action onClick={() => this.acceptChallenge(message.user)}>\r\n                Accept Challenge\r\n              </Comment.Action>\r\n            </Comment.Actions>\r\n          );\r\n        }\r\n        return (\r\n          <Comment key={message.id}>\r\n            <Comment.Content>\r\n              <Comment.Author>{message.user}</Comment.Author>\r\n              <Comment.Text>{message.message}</Comment.Text>\r\n              {acceptGame}\r\n            </Comment.Content>\r\n          </Comment>\r\n        );\r\n      })\r\n      .reverse();\r\n\r\n    let gameBoard =\r\n      this.props.game && playerSide ? (\r\n        <GameBoard\r\n          roomId={this.props.game}\r\n          offlineMode={false}\r\n          userId={this.props.user.id}\r\n          ref={child => {\r\n            this.gameBoard = child;\r\n          }}\r\n        />\r\n      ) : null;\r\n\r\n    if (gameBoard) {\r\n      return gameBoard;\r\n    }\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={12}>\r\n            <Comment.Group style={{ height: '20em', overflow: 'auto' }}>{messages}</Comment.Group>\r\n            <div\r\n              style={{ float: 'left', clear: 'both' }}\r\n              ref={el => {\r\n                this.messagesEnd = el;\r\n              }}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={4}>\r\n            <List style={{ maxHeight: '20em', overflow: 'auto' }}>\r\n              <List.Item>\r\n                <b>{this.props.user.name}</b>\r\n              </List.Item>\r\n              {users}\r\n            </List>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column width={16}>\r\n            <Form onSubmit={this.handleSubmit.bind(this)}>\r\n              <Input\r\n                action=\"Post\"\r\n                placeholder=\"New Message...\"\r\n                value={this.state.newMessage}\r\n                fluid\r\n                autoFocus\r\n                onChange={this.handleNewMessageChange.bind(this)}\r\n              />\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // this.scrollToBottom();\r\n  }\r\n\r\n  private scrollToBottom() {\r\n    this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  private handleNewMessageChange(e) {\r\n    this.setState({\r\n      newMessage: e.target.value,\r\n    });\r\n  }\r\n\r\n  private handleSubmit() {\r\n    const { newMessage } = this.state;\r\n    const { user, room } = this.props;\r\n    user.sendMessage({\r\n      text: newMessage,\r\n      roomId: room.id,\r\n    });\r\n    this.setState({\r\n      newMessage: '',\r\n    });\r\n  }\r\n\r\n  private challengePlayer(player) {\r\n    const { user, room } = this.props;\r\n    user.sendMessage({\r\n      text: `I challenge ${player.name} to a game`,\r\n      roomId: room.id,\r\n      attachment: {\r\n        link: `urn:player:${player.id}`,\r\n        type: 'file',\r\n        fetchRequired: false,\r\n      },\r\n    });\r\n  }\r\n\r\n  private acceptChallenge(player) {\r\n    const { user } = this.props;\r\n    user\r\n      .createRoom({\r\n        name: `${user.id} vs ${player}`,\r\n        addUserIds: [player],\r\n      })\r\n      .then(room => {\r\n        this.props.startedGame(room.id, user.id, player).then(res => {\r\n          playerSide = res[this.props.user.id];\r\n        });\r\n      });\r\n  }\r\n\r\n  getPlayersInRoom() {\r\n    const players = this.gameBoard ? this.gameBoard.getPlayers() : [];\r\n    const playersInRoom = this.state.users.filter(user => players.includes(user.id));\r\n    return playersInRoom;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Segment, Grid } from 'semantic-ui-react';\r\nimport { TokenProvider, ChatManager } from '@pusher/chatkit-client';\r\nimport axios from 'axios';\r\nimport Rooms from './rooms';\r\nimport Chat from './chat';\r\nimport { playerIds } from '../game/game.model';\r\nimport { BACKEND_URL } from '../../app-constants';\r\n\r\ninterface ILobbyState {\r\n  joined: [];\r\n  joinable: [];\r\n  chatManager?: any;\r\n  lobbyId?: string;\r\n  activeRoom?: string;\r\n  currentUser?: any;\r\n}\r\n\r\ninterface ILobbyProps {\r\n  username: string;\r\n}\r\n\r\nexport default class Lobby extends React.Component<ILobbyProps, any> {\r\n  state: ILobbyState = {\r\n    joined: [],\r\n    joinable: [],\r\n  };\r\n  chat;\r\n  chatManager;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.chatManager = new ChatManager({\r\n      instanceLocator: 'v1:us1:f3854d62-ebf2-4ee2-8a48-c62ed279fa8f', // TODO: import this from global consts\r\n      tokenProvider: new TokenProvider({\r\n        url: `${BACKEND_URL}/auth`,\r\n      }),\r\n      userId: props.username,\r\n    });\r\n\r\n    this.chatManager\r\n      .connect()\r\n      .then(currentUser => {\r\n        this.setState({\r\n          currentUser: currentUser,\r\n        });\r\n        currentUser.getJoinableRooms().then(rooms => {\r\n          let lobby = rooms.find(room => room.name === 'Lobby');\r\n          if (lobby) {\r\n            currentUser.joinRoom({ roomId: lobby.id });\r\n          } else {\r\n            lobby = currentUser.rooms.find(room => room.name === 'Lobby');\r\n          }\r\n          if (lobby) {\r\n            this.setState({\r\n              lobbyId: lobby.id,\r\n              activeRoom: lobby.id,\r\n            });\r\n          }\r\n        });\r\n        setInterval(this.pollRooms.bind(this), 5000);\r\n        this.pollRooms();\r\n      })\r\n      .catch(e => {\r\n        console.log('Failed to connect to Chatkit');\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  private pollRooms() {\r\n    const { currentUser } = this.state;\r\n    currentUser.getJoinableRooms().then(rooms => {\r\n      this.setState({\r\n        joined: currentUser.rooms,\r\n        joinable: rooms,\r\n      });\r\n    });\r\n  }\r\n\r\n  private enterRoom(id) {\r\n    const { currentUser } = this.state;\r\n    currentUser\r\n      .joinRoom({ roomId: id })\r\n      .then(() => {\r\n        this.setState({\r\n          activeRoom: id,\r\n        });\r\n        this.pollRooms();\r\n      })\r\n      .catch(() => {\r\n        console.log('Failed to enter room');\r\n      });\r\n  }\r\n\r\n  private leaveRoom(id) {\r\n    const { currentUser } = this.state;\r\n    // TODO: temp disable toom deletion so I can see if games persist over time\r\n    if (this.chat) {\r\n      const playersInRoom = this.chat.getPlayersInRoom();\r\n      if (playersInRoom.length === 1 && playersInRoom[0].id === currentUser.id) {\r\n        currentUser.deleteRoom({ roomId: id });\r\n      }\r\n    }\r\n    currentUser\r\n      .leaveRoom({ roomId: id })\r\n      .then(() => {\r\n        this.pollRooms();\r\n      })\r\n      .catch(() => {\r\n        console.log('Failed to leave room');\r\n      });\r\n  }\r\n\r\n  // TODO: this is being set so poorly.. def some sort of antipattern\r\n  private startedGame(roomId, white, black): Promise<any> {\r\n    return axios\r\n      .request({\r\n        url: `${BACKEND_URL}/games`,\r\n        method: 'POST',\r\n        data: {\r\n          room: roomId,\r\n          whitePlayer: white,\r\n          blackPlayer: black,\r\n        },\r\n      })\r\n      .then(response => {\r\n        this.setState({\r\n          activeRoom: roomId,\r\n        });\r\n        this.pollRooms();\r\n        return {\r\n          [white]: playerIds.phrygians,\r\n          [black]: playerIds.hittites,\r\n        };\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentUser } = this.state;\r\n    let chat;\r\n    if (currentUser) {\r\n      const room = currentUser.rooms.find(room => room.id == this.state.activeRoom);\r\n      if (room) {\r\n        const game = this.state.activeRoom !== this.state.lobbyId && this.state.activeRoom;\r\n        chat = (\r\n          <Chat\r\n            user={currentUser}\r\n            room={room}\r\n            key={room.id}\r\n            startedGame={this.startedGame.bind(this)}\r\n            game={game}\r\n            ref={child => {\r\n              this.chat = child;\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Segment className={'segment-grid-container'}>\r\n        <Grid>\r\n          <Grid.Column width={2}>\r\n            <Rooms\r\n              joined={this.state.joined}\r\n              joinable={this.state.joinable}\r\n              activeRoom={this.state.activeRoom}\r\n              enterRoom={this.enterRoom.bind(this)}\r\n              leaveRoom={this.leaveRoom.bind(this)}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={12}>{chat}</Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport Login from '../lobby/login';\r\nimport Games from '../lobby/lobby';\r\n\r\ninterface IAppState {\r\n  username: string,\r\n}\r\n\r\nclass OnlineModeEntry extends React.Component {\r\n  state: IAppState = {username: ''};\r\n  \r\n  render() {\r\n    let contents;\r\n    if (this.state.username) {\r\n      contents = <Games username={this.state.username} />;\r\n    } else {\r\n      contents = <Login login={this.enterGame.bind(this)} />;\r\n    }\r\n    return <Container>{contents}</Container>;\r\n  }\r\n  enterGame(username) {\r\n    this.setState({\r\n      username: username\r\n    });\r\n  }\r\n}\r\nexport default OnlineModeEntry;","import React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Container } from 'semantic-ui-react';\r\nimport Game from './components/game/game';\r\nimport Home from './components/game/home';\r\nimport OnlineModeEntry from './components/game/onlineModeEntry';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\ninterface IAppState {\r\n  username: string;\r\n}\r\n\r\nclass App extends React.Component {\r\n  state: IAppState = { username: '' };\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/offline-mode\">\r\n              <Game offlineMode={true} />\r\n            </Route>\r\n            <Route path=\"/online-mode\">\r\n              <OnlineModeEntry />\r\n            </Route>\r\n            <Route path=\"/\" component={Home} exact />\r\n          </Switch>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  enterGame(username) {\r\n    this.setState({\r\n      username: username,\r\n    });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}