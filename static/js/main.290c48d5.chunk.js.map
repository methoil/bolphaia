{"version":3,"sources":["resources/whitePawn.svg","resources/blackPawn.svg","resources/whiteCataphract.svg","resources/blackCataphract.svg","resources/whiteArcher.svg","resources/blackArcher.svg","serviceWorker.js","components/game.model.ts","components/health-bar.tsx","components/square.tsx","components/board.tsx","components/pieces/piece.ts","components/pieces/levy.ts","components/pieces/cataphract.ts","components/pieces/piece.utils.ts","components/pieces/archer.ts","components/pieces/rangedPiece.ts","components/game.tsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","playerIds","HealthBar","props","className","style","height","getHealthHeight","maxHealth","remainingHealth","max","remaining","Square","state","hoverIcon","this","cssClasses","join","onClick","bind","onMouseEnter","setHoverIconFromGameCallback","onMouseLeave","resetHoverIcon","backgroundImage","piece","getImageUrl","health","onMoveClick","setState","getHoverIcon","React","Board","board","xLength","boardState","length","yLength","i","squareRows","j","push","isEven","squareHighlight","highlightState","canMove","canAttack","inAttackRange","renderSquare","key","xIdx","yIdx","x","y","num","BasePiece","player","isSelected","attack","moveRange","damage","Levy","phrygians","whiteLevyImageSvg","blackLevyImageSvg","Cataphract","whiteCataphractImageSvg","blackCataphractImageSvg","getMovesPath","src","dest","xDelta","yDelta","isXNegative","isYNegative","xOffset","yOffset","path","selectedPiece","destSquare","currSquare","BOARD_HEIGHT","BOARD_WIDTH","Archer","range","whiteArcherImageSvg","blackArcherImageSvg","Game","turn","selectedSquare","initializeBoard","generateEmptyHighlightedMoves","mouseHoverIcon","xSize","ySize","pieceToPlace","levy","hitites","rowArray","Array","fill","highlightedMoves","currRow","clickedSquare","clickedPiece","getSelectedPiece","generatePossibleMovesHighlights","isTargetValidRangedAttack","newBoardState","cloneDeep","takeDamage","getNewTurn","isMovePossible","movesPath","indexBeforeDest","findIndex","move","console","error","hoveredSquare","hoveredPiece","get","hoveredSquareHighlights","dimensions","getValidIndex","squareHasEnemyPiece","Math","min","index","maxIndex","target","square","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,oHCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IClBMC,E,kDCEG,SAASC,EAAUC,GAChC,OACE,wBAAMC,UAAW,cACf,wBACEA,UAAW,mBACXC,MAAO,CAAEC,OAAQC,EAAgBJ,EAAMK,UAAWL,EAAMM,qBAMhE,SAASF,EAAgBG,EAAaC,GAGpC,MAAM,GAAN,OADyBA,EAAYD,EADjB,GAEpB,O,SDhBUT,K,sBAAAA,E,mBAAAA,M,KEWZ,IAEqBW,E,YAGnB,WAAYT,GAAsB,IAAD,8BAC/B,4CAAMA,KAHRU,WAEiC,EAE/B,EAAKA,MAAQ,CACXC,UAAW,IAHkB,E,sEAO/B,OACE,0BACEV,UAAS,iBAAYW,KAAKZ,MAAMa,WAAWC,KAAK,KAAvC,YAA+CF,KAAKF,MAAMC,WACnEI,QAASH,KAAKG,QAAQC,KAAKJ,MAC3BK,aAAcL,KAAKM,6BAA6BF,KAAKJ,MACrDO,aAAcP,KAAKQ,eAAeJ,KAAKJ,MACvCV,MAAO,CACLmB,gBAAiB,cAAOT,KAAKZ,MAAMsB,OAASV,KAAKZ,MAAMsB,MAAMC,cAA5C,OAAgE,IAGlFX,KAAKZ,MAAMsB,MACV,gBAACvB,EAAD,CACEM,UAAWO,KAAKZ,MAAMsB,MAAMjB,UAC5BC,gBAAiBM,KAAKZ,MAAMsB,MAAME,SAGpC,M,gCAQN,OADAZ,KAAKZ,MAAMyB,cACJb,KAAKM,iC,uCAIZ,OAAON,KAAKc,SAAS,CAAEf,UAAW,O,qDAGE,IAAD,OACnC,OAAOC,KAAKc,UAAS,SAAAhB,GACnB,MAAO,CAAEC,UAAW,EAAKX,MAAM2B,uB,GA3CDC,aCOfC,E,iLAOjB,IALA,IAAMC,EAAQ,GAERC,EAAUnB,KAAKZ,MAAMgC,WAAWC,OAChCC,EAAUtB,KAAKZ,MAAMgC,WAAW,GAAGC,OAEhCE,EAAI,EAAGA,EAAIJ,EAASI,IAAK,CAEhC,IADA,IAAMC,EAAa,GACVC,EAAI,EAAGA,EAAIH,EAASG,IAAK,CAChC,IAAMxB,EAAa,GACnBA,EAAWyB,KACRC,EAAOJ,IAAMI,EAAOF,KAASE,EAAOJ,KAAOI,EAAOF,GAAM,eAAiB,eAG5E,IAAMf,EAAQV,KAAKZ,MAAMgC,WAAWG,GAAGE,GACjCG,EAAkB5B,KAAKZ,MAAMyC,eAAeR,QAAUrB,KAAKZ,MAAMyC,eAAeN,GAAGE,GACrFG,GAAmBA,EAAgBE,SACrC7B,EAAWyB,MACqB,IAA9BE,EAAgBG,UACZ,yBACA,4BAGJH,GAAmBA,EAAgBI,eACrC/B,EAAWyB,KAAK,uCAGlBF,EAAWE,KAAK1B,KAAKiC,aAAaV,EAAGE,EAAGxB,EAAYS,IAEtDQ,EAAMQ,KACJ,uBAAKQ,IAAKX,EAAGlC,UAAU,aACpBmC,IAKP,OAAO,2BAAMN,K,mCAGFiB,EAAcC,EAAcnC,EAAsBS,GAAuB,IAAD,OACnF,OACE,gBAAC,EAAD,CACEwB,IAAY,EAAPC,EAAWC,EAChBnC,WAAYA,EACZS,MAAOA,EACPG,YAAa,kBAAM,EAAKzB,MAAMyB,YAAY,CAAEwB,EAAGF,EAAMG,EAAGF,KACxDrB,aAAc,kBAAM,EAAK3B,MAAM2B,aAAa,CAAEsB,EAAGF,EAAMG,EAAGF,W,GA/C/BpB,aAqDnC,SAASW,EAAOY,GACd,OAAOA,EAAM,IAAM,E,ICvESC,E,WAQ5B,WAAYC,GAAoB,yBAPzBA,YAOwB,OANxBC,YAAsB,EAME,KALtB9B,OAAS,EAKa,KAJbnB,eAIa,OAHtBkD,OAAS,EAGa,KAFtBC,UAAY,EAGnB5C,KAAKyC,OAASA,E,uDAGEI,GAEhB,OADA7C,KAAKY,OAASZ,KAAKY,OAASiC,EACrB7C,KAAKY,W,uCCZKkC,E,2MACnBF,UAAoB,E,EACpBhC,OAAiB,E,EACRnB,UAAoB,E,EAC7BkD,OAAiB,E,6EAGf,OAAO3C,KAAKyC,SAAWvD,EAAU6D,UAAYC,IAAoBC,Q,GAPnCT,G,kCCAbU,E,2MACZN,UAAoB,E,EACpBhC,OAAiB,G,EACfnB,UAAoB,G,EACtBkD,OAAiB,E,6EAGtB,OAAO3C,KAAKyC,SAAWvD,EAAU6D,UAAYI,IAA0BC,Q,GAPnCZ,GCAjC,SAASa,EAAaC,EAAiBC,EAAkBrC,GAC9D,GAAIqC,EAAKlB,EAAI,GAAKiB,EAAIjB,EAAI,GAAKkB,EAAKjB,EAAI,GAAKgB,EAAIhB,EAAI,EACnD,MAAO,GAET,IAAIkB,EAASD,EAAKlB,EAAIiB,EAAIjB,EACtBoB,EAASF,EAAKjB,EAAIgB,EAAIhB,EACpBoB,EAAuBF,EAAS,EAChCG,EAAuBF,EAAS,EAClCG,EAAkB,EAClBC,EAAkB,EAChBC,EAAqB,CAACR,GAEtBS,EAAgB7C,EAAMoC,EAAIjB,GAAGiB,EAAIhB,GACvC,IAAKyB,EACH,MAAO,GAGT,KAAkB,IAAXP,GAA2B,IAAXC,GAAc,CACpB,IAAXD,IACFI,GAAWF,GAAe,EAAI,EAC9BF,GAAUE,EAAc,GAAK,GAEhB,IAAXD,IACFI,GAAWF,GAAe,EAAI,EAC9BF,GAAUE,EAAc,GAAK,GAG/B,IAAMK,EAAa9C,EAAMoC,EAAIjB,EAAIuB,GAASN,EAAIhB,EAAIuB,GAC5CI,EAAa,CAAE5B,EAAGiB,EAAIjB,EAAIuB,EAAStB,EAAGgB,EAAIhB,EAAIuB,GACpD,GAAmB,OAAfG,EAAqB,CACnBD,EAActB,SAAWuB,EAAWvB,QACtCqB,EAAKpC,KAAKuC,GAEZ,MAMF,GAHAH,EAAKpC,KAAKuC,IAIW,IAAjBA,EAAW5B,GAAW4B,EAAW5B,IAAM6B,EAAe,IAAiB,IAAXT,IAC3C,IAAjBQ,EAAW3B,GAAW2B,EAAW3B,IAAM6B,EAAc,IAAiB,IAAXX,EAE7D,MAIJ,OAAOM,E,sCC/CYM,E,2MACnBxB,UAAoB,E,EACpBhC,OAAiB,E,EACRnB,UAAoB,E,EAC7BkD,OAAiB,E,EACjB0B,MAAgB,E,6EAGd,OAAOrE,KAAKyC,SAAWvD,EAAU6D,UAAYuB,IAAsBC,Q,8MCV5DF,MAAgB,E,6BADuB7B,I,yjBCW3C,IAAM2B,EAAsB,GACtBD,EAAuB,GAmBfM,E,YAiBnB,WAAYpF,GAAa,IAAD,8BAEtB,4CAAMA,KAlBRU,WAgBwB,EAGtB,EAAKA,MAAQ,CACX2E,KAAMvF,EAAU6D,UAChB2B,eAAgB,KAChBtD,WAAY,EAAKuD,gBAAgBT,EAAcC,GAC/CtC,eAAgB,EAAK+C,gCACrBC,eAAgB,IARI,E,sEAbtB,OACE,2BACE,2BAAM7E,KAAKF,MAAM2E,MACjB,gBAAC,EAAD,CACErD,WAAYpB,KAAKF,MAAMsB,WACvBS,eAAgB7B,KAAKF,MAAM+B,eAC3BhB,YAAab,KAAKa,YAAYT,KAAKJ,MACnCe,aAAcf,KAAKe,aAAaX,KAAKJ,a,qDAkBrB8E,EAAeC,GAErC,IADA,IAAM3D,EAAa,GACViB,EAAI,EAAGA,EAAIyC,EAAOzC,IAAK,CAC9B,IAAI2C,EAA8B,KAClC,GAAU,IAAN3C,EAAJ,CAOO,GAAU,IAANA,EACT2C,EAAe,IAAIC,EAAK/F,EAAU6D,gBAC7B,GAAU,IAANV,EACT2C,EAAe,IAAIC,EAAK/F,EAAUgG,cAC7B,GAAU,IAAN7C,EAAS,CAClB,IAAM8C,EAAW,IAAIC,MAAML,GAAOM,KAAK,MACvCF,EAAS,GAAK,IAAIjC,EAAWhE,EAAUgG,SACvCC,EAAS,GAAK,IAAIf,EAAOlF,EAAUgG,SACnCC,EAAS,GAAK,IAAIjC,EAAWhE,EAAUgG,SACvC9D,EAAWM,KAAKyD,GAChB,SAGF/D,EAAWM,KAAK,IAAI0D,MAAML,GAAOM,KAAKL,QApBtC,CACE,IAAMG,EAAW,IAAIC,MAAML,GAAOM,KAAK,MACvCF,EAAS,GAAK,IAAIjC,EAAWhE,EAAU6D,WACvCoC,EAAS,GAAK,IAAIf,EAAOlF,EAAU6D,WACnCoC,EAAS,GAAK,IAAIjC,EAAWhE,EAAU6D,WACvC3B,EAAWM,KAAKyD,IAkBpB,OAAO/D,I,yCAIP,OACEpB,KAAKF,MAAM4E,gBACX1E,KAAKF,MAAMsB,WAAWpB,KAAKF,MAAM4E,eAAerC,GAAGrC,KAAKF,MAAM4E,eAAepC,K,sDAM/E,IADA,IAAMgD,EAAmB,GAChBjD,EAAI,EAAGA,EAAI6B,EAAc7B,IAAK,CAErC,IADA,IAAMkD,EAAU,GACPjD,EAAI,EAAGA,EAAI6B,EAAa7B,IAAK,CAMpCiD,EAAQ7D,KAL6B,CACnCI,SAAS,EACTC,WAAW,EACXC,eAAe,IAInBsD,EAAiB5D,KAAK6D,GAExB,OAAOD,I,kCAGWE,GAClB,IAAMd,EAAiB1E,KAAKF,MAAM4E,eAC5Be,EAAezF,KAAKF,MAAMsB,WAAWoE,EAAcnD,GAAGmD,EAAclD,GACpEyB,EAAgB/D,KAAK0F,mBAG3B,GAAK3B,GAAkB0B,EAAvB,CAKA,IAAK1B,GAAiC,MAAhB0B,EAAsB,CAC1C,GAAIA,EAAahD,SAAWzC,KAAKF,MAAM2E,KACrC,OAGF,OAAOzE,KAAKc,SAAS,CACnB4D,eAAe,EAAD,GAAOc,GACrB3D,eAAgB7B,KAAK2F,gCAAgCH,EAAeC,KAKxE,GACEzF,KAAK4F,0BAA0BJ,EAAezB,IAC9CA,GACA0B,EACA,CACA,IAAMI,EAAgBC,oBAAU9F,KAAKF,MAAMsB,YAS3C,OARAqE,EAAaM,WAAWhC,EAAcpB,QAElC8C,EAAa7E,QAAU,EAEzBiF,EAAcL,EAAcnD,GAAGmD,EAAclD,GAAK,KAElDuD,EAAcL,EAAcnD,GAAGmD,EAAclD,GAAKmD,EAE7CzF,KAAKc,SAAS,CACnBM,WAAYyE,EACZnB,eAAgB,KAChB7C,eAAgB7B,KAAK4E,gCACrBH,KAAMzE,KAAKgG,eAIf,IAAMC,EAAiBjG,KAAKF,MAAM+B,eAAe2D,EAAcnD,GAAGmD,EAAclD,GAAGR,QAGnF,GAAIiC,GAAiBW,GAAkBuB,EAAgB,CACrD,IAAMJ,EAAgBC,oBAAU9F,KAAKF,MAAMsB,YAG3C,GAAIqE,GAAgBA,IAAiB1B,EAEnC,GADA0B,EAAaM,WAAWhC,EAAcpB,QAClC8C,EAAa7E,QAAU,EAEzBiF,EAAcnB,EAAerC,GAAGqC,EAAepC,GAAK,KACpDuD,EAAcL,EAAcnD,GAAGmD,EAAclD,GAAKyB,MAC7C,CACL,IAAMmC,EAAY7C,EAAaqB,EAAgBc,EAAexF,KAAKF,MAAMsB,YACnE+E,EACJC,oBAAUF,GAAW,SAAAG,GACnB,OAAOA,EAAKhE,IAAMmD,EAAcnD,GAAKgE,EAAK/D,IAAMkD,EAAclD,KAC3D,EAEH6D,EAAkB,GAEpBG,QAAQC,MAAM,6DAGhB,IAAMhD,EAAO2C,EAAUC,GACvBN,EAAcnB,EAAerC,GAAGqC,EAAepC,GAAK,KACpDuD,EAActC,EAAKlB,GAAGkB,EAAKjB,GAAKyB,EAChC8B,EAAcL,EAAcnD,GAAGmD,EAAclD,GAAKmD,OAGpDI,EAAcnB,EAAerC,GAAGqC,EAAepC,GAAK,KACpDuD,EAAcL,EAAcnD,GAAGmD,EAAclD,GAAKyB,EAGpD,OAAO/D,KAAKc,SAAS,CACnBM,WAAYyE,EACZnB,eAAgB,KAChB7C,eAAgB7B,KAAK4E,gCACrBH,KAAMzE,KAAKgG,eAKf,OAAIjC,IAAkBkC,EACbjG,KAAKc,SAAS,CACnB4D,eAAgB,KAChB7C,eAAgB7B,KAAK4E,uCAHzB,K,mCASA,OAAO5E,KAAKF,MAAM2E,OAASvF,EAAU6D,UAAY7D,EAAUgG,QAAUhG,EAAU6D,Y,mCAG5DyD,GACnB,IAAMzC,EAAgB/D,KAAK0F,mBACrBe,EAAeC,cACnB1G,KADsB,2BAEFwG,EAAcnE,EAFZ,aAEkBmE,EAAclE,EAFhC,KAGtB,MAEF,IAAKyB,GAAiB0C,GAAgBA,EAAahE,SAAWzC,KAAKF,MAAM2E,KACvE,MAAO,eACF,IAAKV,EACV,MAAO,GAGT,IAAM4C,EAA0B3G,KAAKF,MAAM+B,eAAe2E,EAAcnE,GAAGmE,EAAclE,GACzF,OAAItC,KAAK4F,0BAA0BY,EAAezC,GACzC,WACE4C,EAAwB5E,UAC1B,aACE4E,EAAwB7E,QAC1B,aAEA,K,sDAKTwB,EACAS,GAEA,IAAMuB,EAAmBtF,KAAK4E,gCAC9B,IAAKb,EACH,OAAOuB,EAIT,IAFA,IAAMsB,EAAuB,EAAE7C,EAAcnB,UAAW,EAAGmB,EAAcnB,WAEhEP,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAIM4D,EAAY7C,EAAaC,EAJlB,CACXjB,EAAGrC,KAAK6G,cAAcvD,EAAIjB,EAAIuE,EAAWvE,GAAI6B,EAAe,GAC5D5B,EAAGtC,KAAK6G,cAAcvD,EAAIhB,EAAIsE,EAAWtE,GAAI6B,EAAc,IAEnBnE,KAAKF,MAAMsB,YAL3B,uBAO1B,YAAiB8E,EAAjB,+CAA4B,CAAC,IAApBG,EAAmB,QAC1Bf,EAAiBe,EAAKhE,GAAGgE,EAAK/D,GAAGR,SAAU,EACvC9B,KAAK8G,oBAAoBT,EAAMtC,KACjCuB,EAAiBe,EAAKhE,GAAGgE,EAAK/D,GAAGP,WAAY,IAVvB,mFAgB9B,GAAKgC,EAA+BM,MAGlC,IAFA,IAAMA,EAASN,EAA+BM,MAErChC,EAAI0E,KAAKpH,IAAI2D,EAAIjB,EAAIgC,EAAO,GAAIhC,GAAK0E,KAAKC,IAAI1D,EAAIjB,EAAIgC,EAAOH,GAAe7B,IACnF,IAAK,IAAIC,EAAIyE,KAAKpH,IAAI2D,EAAIhB,EAAI+B,EAAO,GAAI/B,GAAKyE,KAAKC,IAAI1D,EAAIhB,EAAI+B,EAAOF,GAAc7B,IAClFgD,EAAiBjD,GAAGC,GAAGN,eAAgB,EAK7C,OAAOsD,I,oCAGa2B,EAAeC,GACnC,OAAID,EAAQC,EACHA,EACED,EAAQ,EACV,EAEAA,I,gDAIuBE,EAAoBpD,GAEpD,QACKA,EAA+BM,OAClCrE,KAAKF,MAAM+B,eAAesF,EAAO9E,GAAG8E,EAAO7E,GAAGN,eAC9ChC,KAAK8G,oBAAoBK,EAAQpD,K,0CAITqD,EAAoBrD,GAC9C,OACE2C,cAAI1G,KAAD,2BAA2BoH,EAAO/E,EAAlC,aAAwC+E,EAAO9E,EAA/C,YAA4DyB,EAActB,UAC7EsB,EAActB,W,GA/QczB,aC3BlCqG,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SZyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.290c48d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/whitePawn.d69014fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackPawn.1c52d8c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/whiteCataphract.e6294efe.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackCataphract.d39f1d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/whiteArcher.9cbde199.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackArcher.ae09d6fb.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum playerIds {\r\n  phrygians = \"phrygians\",\r\n  hitites = \"hitites\"\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport default function HealthBar(props: any) {\r\n  return (\r\n    <span className={\"health-box\"}>\r\n      <span\r\n        className={\"remaining-health\"}\r\n        style={{ height: getHealthHeight(props.maxHealth, props.remainingHealth) }}\r\n      ></span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction getHealthHeight(max: number, remaining: number): string {\r\n  const maxHealthPx = 29;\r\n  const remainingHeight = (remaining / max) * maxHealthPx;\r\n  return `${remainingHeight}px`;\r\n}\r\n","import * as React from \"react\";\r\nimport HealthBar from \"./health-bar\";\r\nimport { IPiece } from \"./pieces/IPieces.model\";\r\n\r\ninterface ISquareProps {\r\n  cssClasses: string[];\r\n  piece: IPiece | null;\r\n  onMoveClick: () => any;\r\n  getHoverIcon: () => any;\r\n}\r\n\r\nlet hoverIcon: string = \"\";\r\n\r\nexport default class Square extends React.Component<ISquareProps, {}> {\r\n  state: { hoverIcon: string };\r\n\r\n  constructor(props: ISquareProps) {\r\n    super(props);\r\n    this.state = {\r\n      hoverIcon: \"\"\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <button\r\n        className={`square ${this.props.cssClasses.join(\" \")} ${this.state.hoverIcon}`}\r\n        onClick={this.onClick.bind(this)}\r\n        onMouseEnter={this.setHoverIconFromGameCallback.bind(this)}\r\n        onMouseLeave={this.resetHoverIcon.bind(this)}\r\n        style={{\r\n          backgroundImage: `url(${this.props.piece && this.props.piece.getImageUrl()})` || \"\"\r\n        }}\r\n      >\r\n        {this.props.piece ? (\r\n          <HealthBar\r\n            maxHealth={this.props.piece.maxHealth}\r\n            remainingHealth={this.props.piece.health}\r\n          ></HealthBar>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  onClick(): void {\r\n    this.props.onMoveClick();\r\n    return this.setHoverIconFromGameCallback();\r\n  }\r\n\r\n  resetHoverIcon(): void {\r\n    return this.setState({ hoverIcon: \"\" });\r\n  }\r\n\r\n  setHoverIconFromGameCallback(): void {\r\n    return this.setState(state => {\r\n      return { hoverIcon: this.props.getHoverIcon() };\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport \"../index.scss\";\r\nimport Square from \"./square\";\r\nimport { IBoardState, IPossibleMoves } from \"./game\";\r\nimport { coordinate, IPiece } from \"./pieces/IPieces.model\";\r\n\r\ninterface ISquare {\r\n  style: string;\r\n  shade: string;\r\n  onMoveClick: () => any;\r\n  getHoverIcon: () => any;\r\n}\r\ninterface IBoardProps {\r\n  boardState: IBoardState;\r\n  highlightState: IPossibleMoves;\r\n  onMoveClick: (clickedSquare: coordinate) => void;\r\n  getHoverIcon: (clickedSquare: coordinate) => void;\r\n}\r\n\r\nexport default class Board extends React.Component<IBoardProps, {}> {\r\n  render() {\r\n    const board = [];\r\n\r\n    const xLength = this.props.boardState.length;\r\n    const yLength = this.props.boardState[0].length;\r\n\r\n    for (let i = 0; i < xLength; i++) {\r\n      const squareRows = [];\r\n      for (let j = 0; j < yLength; j++) {\r\n        const cssClasses = [];\r\n        cssClasses.push(\r\n          (isEven(i) && isEven(j)) || (!isEven(i) && !isEven(j)) ? \"light-square\" : \"dark-square\"\r\n        );\r\n\r\n        const piece = this.props.boardState[i][j];\r\n        const squareHighlight = this.props.highlightState.length && this.props.highlightState[i][j];\r\n        if (squareHighlight && squareHighlight.canMove) {\r\n          cssClasses.push(\r\n            squareHighlight.canAttack === true\r\n              ? \"highlighted-square-red\"\r\n              : \"highlighted-square-green\"\r\n          );\r\n        }\r\n        if (squareHighlight && squareHighlight.inAttackRange) {\r\n          cssClasses.push(\"highlighted-square-in-ranged-attack\");\r\n        }\r\n\r\n        squareRows.push(this.renderSquare(i, j, cssClasses, piece));\r\n      }\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {squareRows}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div>{board}</div>;\r\n  }\r\n\r\n  renderSquare(xIdx: number, yIdx: number, cssClasses: string[], piece: IPiece | null) {\r\n    return (\r\n      <Square\r\n        key={xIdx * 8 + yIdx}\r\n        cssClasses={cssClasses}\r\n        piece={piece}\r\n        onMoveClick={() => this.props.onMoveClick({ x: xIdx, y: yIdx })}\r\n        getHoverIcon={() => this.props.getHoverIcon({ x: xIdx, y: yIdx })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction isEven(num: number): boolean {\r\n  return num % 2 === 0;\r\n}\r\n","import { IBasePiece } from \"./IPieces.model\";\r\nimport { playerIds } from \"../game.model\";\r\n\r\nexport default abstract class BasePiece implements IBasePiece {\r\n  public player: playerIds;\r\n  public isSelected: boolean = false;\r\n  abstract health = 0;\r\n  abstract readonly maxHealth: number;\r\n  abstract attack = 0;\r\n  abstract moveRange = 0;\r\n\r\n  constructor(player: playerIds) {\r\n    this.player = player;\r\n  }\r\n\r\n  public takeDamage(damage: number): number {\r\n    this.health = this.health - damage;\r\n    return this.health;\r\n  }\r\n\r\n  abstract getImageUrl(): string;\r\n}\r\n","import BasePiece from \"./piece\";\r\nimport { playerIds } from \"../game.model\";\r\nimport whiteLevyImageSvg from \"../../resources/whitePawn.svg\";\r\nimport blackLevyImageSvg from \"../../resources/blackPawn.svg\";\r\n\r\nexport default class Levy extends BasePiece {\r\n  moveRange: number = 2;\r\n  health: number = 2;\r\n  readonly maxHealth: number = 2;\r\n  attack: number = 1;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteLevyImageSvg : blackLevyImageSvg;\r\n  }\r\n}\r\n","import BasePiece from \"./piece\";\r\nimport { playerIds } from \"../game.model\";\r\nimport whiteCataphractImageSvg from \"../../resources/whiteCataphract.svg\";\r\nimport blackCataphractImageSvg from \"../../resources/blackCataphract.svg\";\r\n\r\nexport default class Cataphract extends BasePiece {\r\n  public moveRange: number = 5;\r\n  public health: number = 10;\r\n  readonly maxHealth: number = 10;\r\n  public attack: number = 5;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteCataphractImageSvg : blackCataphractImageSvg;\r\n  }\r\n}\r\n","import { coordinate } from \"./IPieces.model\";\r\nimport { IBoardState, BOARD_WIDTH, BOARD_HEIGHT } from \"../game\";\r\n\r\n// call this 8 times to get all possible moves\r\n// assumes no trample;\r\nexport function getMovesPath(src: coordinate, dest: coordinate, board: IBoardState): coordinate[] {\r\n  if (dest.x < 0 || src.x < 0 || dest.y < 0 || src.y < 0) {\r\n    return [];\r\n  }\r\n  let xDelta = dest.x - src.x;\r\n  let yDelta = dest.y - src.y;\r\n  const isXNegative: boolean = xDelta < 0;\r\n  const isYNegative: boolean = yDelta < 0;\r\n  let xOffset: number = 0;\r\n  let yOffset: number = 0;\r\n  const path: coordinate[] = [src];\r\n\r\n  const selectedPiece = board[src.x][src.y];\r\n  if (!selectedPiece) {\r\n    return [];\r\n  }\r\n\r\n  while (xDelta !== 0 || yDelta !== 0) {\r\n    if (xDelta !== 0) {\r\n      xOffset += isXNegative ? -1 : 1;\r\n      xDelta += isXNegative ? 1 : -1;\r\n    }\r\n    if (yDelta !== 0) {\r\n      yOffset += isYNegative ? -1 : 1;\r\n      yDelta += isYNegative ? 1 : -1;\r\n    }\r\n\r\n    const destSquare = board[src.x + xOffset][src.y + yOffset];\r\n    const currSquare = { x: src.x + xOffset, y: src.y + yOffset };\r\n    if (destSquare !== null) {\r\n      if (selectedPiece.player !== destSquare.player) {\r\n        path.push(currSquare);\r\n      }\r\n      break;\r\n    }\r\n\r\n    path.push(currSquare);\r\n\r\n    // edge reached - stop finding path\r\n    if (\r\n      ((currSquare.x === 0 || currSquare.x === BOARD_HEIGHT - 1) && yDelta !== 0) ||\r\n      ((currSquare.y === 0 || currSquare.y === BOARD_WIDTH - 1) && xDelta !== 0)\r\n    ) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\n","import whiteArcherImageSvg from \"../../resources/whiteArcher.svg\";\r\nimport blackArcherImageSvg from \"../../resources/blackArcher.svg\";\r\nimport RangedPiece from \"./rangedPiece\";\r\nimport { playerIds } from \"../game.model\";\r\n\r\nexport default class Archer extends RangedPiece {\r\n  moveRange: number = 2;\r\n  health: number = 2;\r\n  readonly maxHealth: number = 2;\r\n  attack: number = 1;\r\n  range: number = 4;\r\n\r\n  getImageUrl() {\r\n    return this.player === playerIds.phrygians ? whiteArcherImageSvg : blackArcherImageSvg;\r\n  }\r\n}\r\n","import BasePiece from \"./piece\";\r\n\r\nexport default abstract class RangedPiece extends BasePiece {\r\n  abstract range: number = 0;\r\n  // abstract accuracy: number ??\r\n}\r\n","import * as React from \"react\";\r\nimport { cloneDeep, findIndex, get } from \"lodash\";\r\n\r\nimport \"../index.scss\";\r\nimport { playerIds } from \"./game.model\";\r\nimport Board from \"./board\";\r\nimport levy from \"./pieces/levy\";\r\nimport { IPiece, coordinate, IRangedPiece } from \"./pieces/IPieces.model\";\r\nimport Cataphract from \"./pieces/cataphract\";\r\nimport { getMovesPath } from \"./pieces/piece.utils\";\r\nimport Archer from \"./pieces/archer\";\r\nimport RangedPiece from \"./pieces/rangedPiece\";\r\n\r\nexport const BOARD_WIDTH: number = 24;\r\nexport const BOARD_HEIGHT: number = 16;\r\n\r\nexport type IPossibleMove = {\r\n  canMove: boolean;\r\n  canAttack: boolean;\r\n  inAttackRange: boolean;\r\n};\r\nexport type IPossibleMoves = IPossibleMove[][];\r\nexport type ISelectedPiece = IPiece | IRangedPiece | null;\r\nexport type IBoardState = (IPiece | null)[][];\r\n\r\ninterface IGameState {\r\n  turn: playerIds;\r\n  boardState: IBoardState;\r\n  highlightState: IPossibleMoves;\r\n  selectedSquare: coordinate | null;\r\n  mouseHoverIcon: string;\r\n}\r\n\r\nexport default class Game extends React.Component<{}, {}> {\r\n  state: IGameState;\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.state.turn}</div>\r\n        <Board\r\n          boardState={this.state.boardState}\r\n          highlightState={this.state.highlightState}\r\n          onMoveClick={this.onMoveClick.bind(this)}\r\n          getHoverIcon={this.getHoverIcon.bind(this)}\r\n        ></Board>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  constructor(props: any) {\r\n    // no props will be passed here?\r\n    super(props);\r\n    this.state = {\r\n      turn: playerIds.phrygians,\r\n      selectedSquare: null,\r\n      boardState: this.initializeBoard(BOARD_HEIGHT, BOARD_WIDTH),\r\n      highlightState: this.generateEmptyHighlightedMoves(),\r\n      mouseHoverIcon: \"\"\r\n    };\r\n  }\r\n\r\n  private initializeBoard(xSize: number, ySize: number): IBoardState {\r\n    const boardState = [];\r\n    for (let x = 0; x < xSize; x++) {\r\n      let pieceToPlace: IPiece | null = null;\r\n      if (x === 0) {\r\n        const rowArray = new Array(ySize).fill(null);\r\n        rowArray[1] = new Cataphract(playerIds.phrygians);\r\n        rowArray[3] = new Archer(playerIds.phrygians);\r\n        rowArray[6] = new Cataphract(playerIds.phrygians);\r\n        boardState.push(rowArray);\r\n        continue;\r\n      } else if (x === 1) {\r\n        pieceToPlace = new levy(playerIds.phrygians);\r\n      } else if (x === 6) {\r\n        pieceToPlace = new levy(playerIds.hitites);\r\n      } else if (x === 7) {\r\n        const rowArray = new Array(ySize).fill(null);\r\n        rowArray[1] = new Cataphract(playerIds.hitites);\r\n        rowArray[3] = new Archer(playerIds.hitites);\r\n        rowArray[6] = new Cataphract(playerIds.hitites);\r\n        boardState.push(rowArray);\r\n        continue;\r\n      }\r\n\r\n      boardState.push(new Array(ySize).fill(pieceToPlace));\r\n    }\r\n\r\n    return boardState;\r\n  }\r\n\r\n  private getSelectedPiece() {\r\n    return (\r\n      this.state.selectedSquare &&\r\n      this.state.boardState[this.state.selectedSquare.x][this.state.selectedSquare.y]\r\n    );\r\n  }\r\n\r\n  private generateEmptyHighlightedMoves(): IPossibleMoves {\r\n    const highlightedMoves = [];\r\n    for (let x = 0; x < BOARD_HEIGHT; x++) {\r\n      const currRow = [];\r\n      for (let y = 0; y < BOARD_WIDTH; y++) {\r\n        const noMovesSquare: IPossibleMove = {\r\n          canMove: false,\r\n          canAttack: false,\r\n          inAttackRange: false\r\n        };\r\n        currRow.push(noMovesSquare);\r\n      }\r\n      highlightedMoves.push(currRow);\r\n    }\r\n    return highlightedMoves;\r\n  }\r\n\r\n  private onMoveClick(clickedSquare: coordinate): void {\r\n    const selectedSquare = this.state.selectedSquare;\r\n    const clickedPiece = this.state.boardState[clickedSquare.x][clickedSquare.y];\r\n    const selectedPiece = this.getSelectedPiece();\r\n\r\n    // nothing to do\r\n    if (!selectedPiece && !clickedPiece) {\r\n      return;\r\n    }\r\n\r\n    // Select the clicked piece if none is currently selected\r\n    if (!selectedPiece && clickedPiece != null) {\r\n      if (clickedPiece.player !== this.state.turn) {\r\n        return;\r\n      }\r\n\r\n      return this.setState({\r\n        selectedSquare: { ...clickedSquare },\r\n        highlightState: this.generatePossibleMovesHighlights(clickedSquare, clickedPiece)\r\n      });\r\n    }\r\n\r\n    // case of ranged attack\r\n    if (\r\n      this.isTargetValidRangedAttack(clickedSquare, selectedPiece as RangedPiece) &&\r\n      selectedPiece &&\r\n      clickedPiece\r\n    ) {\r\n      const newBoardState = cloneDeep(this.state.boardState);\r\n      clickedPiece.takeDamage(selectedPiece.attack);\r\n\r\n      if (clickedPiece.health <= 0) {\r\n        // TODO: move clicked piece to graveyard\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = null;\r\n      } else {\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = clickedPiece;\r\n      }\r\n      return this.setState({\r\n        boardState: newBoardState,\r\n        selectedSquare: null,\r\n        highlightState: this.generateEmptyHighlightedMoves(),\r\n        turn: this.getNewTurn()\r\n      });\r\n    }\r\n\r\n    const isMovePossible = this.state.highlightState[clickedSquare.x][clickedSquare.y].canMove;\r\n\r\n    // Move the piece if a valid move is selected\r\n    if (selectedPiece && selectedSquare && isMovePossible) {\r\n      const newBoardState = cloneDeep(this.state.boardState);\r\n      // combat occurs on destination arrival\r\n      // trample will happen elsewhere?\r\n      if (clickedPiece && clickedPiece !== selectedPiece) {\r\n        clickedPiece.takeDamage(selectedPiece.attack);\r\n        if (clickedPiece.health <= 0) {\r\n          // TODO: move clicked piece to graveyard\r\n          newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n          newBoardState[clickedSquare.x][clickedSquare.y] = selectedPiece;\r\n        } else {\r\n          const movesPath = getMovesPath(selectedSquare, clickedSquare, this.state.boardState);\r\n          const indexBeforeDest =\r\n            findIndex(movesPath, move => {\r\n              return move.x === clickedSquare.x && move.y === clickedSquare.y;\r\n            }) - 1;\r\n\r\n          if (indexBeforeDest < 0) {\r\n            // TODO: handle this... possibility..\r\n            console.error(\"something went wrong.. should not happen.. crash imminent\");\r\n          }\r\n\r\n          const dest = movesPath[indexBeforeDest];\r\n          newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n          newBoardState[dest.x][dest.y] = selectedPiece;\r\n          newBoardState[clickedSquare.x][clickedSquare.y] = clickedPiece;\r\n        }\r\n      } else {\r\n        newBoardState[selectedSquare.x][selectedSquare.y] = null;\r\n        newBoardState[clickedSquare.x][clickedSquare.y] = selectedPiece;\r\n      }\r\n\r\n      return this.setState({\r\n        boardState: newBoardState,\r\n        selectedSquare: null,\r\n        highlightState: this.generateEmptyHighlightedMoves(),\r\n        turn: this.getNewTurn()\r\n      });\r\n    }\r\n\r\n    // unselect piece when clicking on invalid move location\r\n    if (selectedPiece && !isMovePossible) {\r\n      return this.setState({\r\n        selectedSquare: null,\r\n        highlightState: this.generateEmptyHighlightedMoves()\r\n      });\r\n    }\r\n  }\r\n\r\n  private getNewTurn(): playerIds {\r\n    return this.state.turn === playerIds.phrygians ? playerIds.hitites : playerIds.phrygians;\r\n  }\r\n\r\n  private getHoverIcon(hoveredSquare: coordinate): string {\r\n    const selectedPiece = this.getSelectedPiece();\r\n    const hoveredPiece = get(\r\n      this,\r\n      `state.boardState[${hoveredSquare.x}][${hoveredSquare.y}]`,\r\n      null\r\n    );\r\n    if (!selectedPiece && hoveredPiece && hoveredPiece.player === this.state.turn) {\r\n      return \"pointer-icon\";\r\n    } else if (!selectedPiece) {\r\n      return \"\";\r\n    }\r\n\r\n    const hoveredSquareHighlights = this.state.highlightState[hoveredSquare.x][hoveredSquare.y];\r\n    if (this.isTargetValidRangedAttack(hoveredSquare, selectedPiece as RangedPiece)) {\r\n      return \"bow-icon\";\r\n    } else if (hoveredSquareHighlights.canAttack) {\r\n      return \"sword-icon\";\r\n    } else if (hoveredSquareHighlights.canMove) {\r\n      return \"boots-icon\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  private generatePossibleMovesHighlights(\r\n    src: coordinate,\r\n    selectedPiece: ISelectedPiece\r\n  ): IPossibleMoves {\r\n    const highlightedMoves = this.generateEmptyHighlightedMoves();\r\n    if (!selectedPiece) {\r\n      return highlightedMoves;\r\n    }\r\n    const dimensions: number[] = [-selectedPiece.moveRange, 0, selectedPiece.moveRange];\r\n\r\n    for (let x = 0; x < 3; x++) {\r\n      for (let y = 0; y < 3; y++) {\r\n        const dest = {\r\n          x: this.getValidIndex(src.x + dimensions[x], BOARD_HEIGHT - 1),\r\n          y: this.getValidIndex(src.y + dimensions[y], BOARD_WIDTH - 1)\r\n        };\r\n        const movesPath = getMovesPath(src, dest, this.state.boardState);\r\n\r\n        for (let move of movesPath) {\r\n          highlightedMoves[move.x][move.y].canMove = true;\r\n          if (this.squareHasEnemyPiece(move, selectedPiece)) {\r\n            highlightedMoves[move.x][move.y].canAttack = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if ((selectedPiece as IRangedPiece).range) {\r\n      const range = (selectedPiece as IRangedPiece).range;\r\n\r\n      for (let x = Math.max(src.x - range, 0); x <= Math.min(src.x + range, BOARD_HEIGHT); x++) {\r\n        for (let y = Math.max(src.y - range, 0); y <= Math.min(src.y + range, BOARD_WIDTH); y++) {\r\n          highlightedMoves[x][y].inAttackRange = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return highlightedMoves;\r\n  }\r\n\r\n  private getValidIndex(index: number, maxIndex: number): number {\r\n    if (index > maxIndex) {\r\n      return maxIndex;\r\n    } else if (index < 0) {\r\n      return 0;\r\n    } else {\r\n      return index;\r\n    }\r\n  }\r\n\r\n  private isTargetValidRangedAttack(target: coordinate, selectedPiece: RangedPiece): boolean {\r\n    // TODO: how could this resolve to 0??????\r\n    return (\r\n      !!(selectedPiece as IRangedPiece).range &&\r\n      this.state.highlightState[target.x][target.y].inAttackRange &&\r\n      this.squareHasEnemyPiece(target, selectedPiece)\r\n    );\r\n  }\r\n\r\n  private squareHasEnemyPiece(square: coordinate, selectedPiece: IPiece): boolean {\r\n    return (\r\n      get(this, `state.boardState[${square.x}][${square.y}].player`, selectedPiece.player) !==\r\n      selectedPiece.player\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Game from \"./components/game\";\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}